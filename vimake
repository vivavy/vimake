#!/bin/env python3
import os, sys, json, subprocess, colorama, yaml, struct
from glob import glob
from pprint import pprint as pp

if "VIMAKE_LEVEL" in os.environ:
    lvl = int(os.environ["VIMAKE_LEVEL"])
else:
    lvl = 0
    os.environ["VIMAKE_LEVEL"] = str(lvl+1)
    os.environ["VIMAKE_ROOT"] = os.getcwd()


PREFIX = "    "*lvl

ERR = PREFIX + colorama.Fore.RED + colorama.Style.BRIGHT
TASK = PREFIX + colorama.Fore.BLUE + colorama.Style.BRIGHT
ITASK = colorama.Fore.BLUE + colorama.Style.BRIGHT
OK = PREFIX + colorama.Fore.GREEN + colorama.Style.BRIGHT
RESET = colorama.Style.RESET_ALL
YELLOW = colorama.Fore.YELLOW + colorama.Style.BRIGHT

# print(PREFIX+"Vimake root: "+os.environ["VIMAKE_ROOT"])
# print(PREFIX+"Real root: "+os.getcwd())

bitness = struct.calcsize("P") * 8

# 1. read the config file

config_file = os.path.join(os.getcwd(), "Vimake")

if not os.path.exists(config_file):
    print(ERR+"No config file found"+RESET)
    sys.exit(1)

with open(config_file) as f:
    config = globconfig = yaml.safe_load(f)

# 2. read the module

module = config["module"]

ready_impls = {}

for ready_impl in globconfig["impls"]:
    ready_impls[ready_impl] = globconfig["impls"][ready_impl]


def fill_impl(dict_or_list, impl, root=None):
    if root is None:
        root = dict_or_list
    if "bitness" not in root:
        root["bitness"] = {}
    if "params" not in root:
        root["params"] = {}
    if "bitness" not in root["params"]:
        root["params"]["bitness"] = bitness
    if isinstance(dict_or_list, dict):
        for k, v in dict_or_list.items():
            if isinstance(v, str):
                dict_or_list[k] = v.replace("${ImplName}", impl).replace("${param:bitness}", str(root["params"]["bitness"])).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
            else:
                fill_impl(v, impl, root)
    elif isinstance(dict_or_list, list):
        for n, i in enumerate(dict_or_list):
            if isinstance(i, str):
                dict_or_list[n] = i.replace("${ImplName}", impl).replace("${param:bitness}", str(root["params"]["bitness"])).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
            else:
                fill_impl(i, impl, root)


if "autoimpls" in globconfig:
    base_impl = globconfig["autoimpls"]["source"]
    for unready_impl in globconfig["autoimpls"]["dest"]:
        if unready_impl not in ready_impls:
            # generate the impl from source impl to dest impls
            uimpl = {**globconfig["impls"][base_impl]}
            uimpl.update(globconfig["autoimpls"]["dest"][unready_impl])
            fill_impl(uimpl, unready_impl)
            ready_impls[unready_impl] = uimpl

# print("DEBUG: IMPLS:")
# pp(ready_impls)

if len(sys.argv) == 1:
    impl = ready_impls.keys()[0]
    config = ready_impls[impl]
elif len(sys.argv) == 2:
    impl = sys.argv[1]
    if impl not in ready_impls:
        print(ERR+"1 No such impl: "+YELLOW+impl+RESET)
        sys.exit(1)
    config = ready_impls[impl]
elif len(sys.argv) == 3:
    if not sys.argv[2].startswith("-"):
        print(ERR+"2 Syntax error: "+YELLOW+sys.argv[2]+RESET)
        sys.exit(1)
    if sys.argv[1] not in config["impls"]:
        print(ERR+"3 No such impl: "+YELLOW+sys.argv[1]+RESET)
        sys.exit(1)
    impl = sys.argv[1]
    config = config["impls"][impl]
    if "d" in sys.argv[2]:
        sys.argv.append("-d")
else:
    print("usage: vimake [impl] [flags]")
    sys.exit(1)

print(TASK+"Module "+YELLOW+module+(ITASK+" impl "+YELLOW+impl if not lvl else "")+RESET)

# 3. read the dependencies

# print(config)

build, modules = config["deps"]["build"], config["deps"]["modules"]

for dep in build:
    try:
        dep = dep.replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
        data = subprocess.check_output([dep, "--version"])
        if data.decode().find("not found") != -1:
            print(PREFIX+ERR+"Dependency "+YELLOW+dep+ERR+" not found"+RESET)
            sys.exit(1)
    except subprocess.CalledProcessError:
        print(PREFIX+ERR+"Dependency "+YELLOW+dep+ERR+" is unavailable"+RESET)
        sys.exit(1)
    except FileNotFoundError:
        print(PREFIX+ERR+"Dependency "+YELLOW+dep+ERR+" not found"+RESET)
        sys.exit(1)

for dep in modules:
    root = os.getcwd()
    for deppath in glob(root.removesuffix("/")+"/**/Vimake", recursive=True):
        with open(deppath) as f:
            depconfig = yaml.safe_load(f)
            if depconfig["module"] == dep:
                break
    else:
        print(PREFIX+ERR+"Dependency module "+YELLOW+dep+ERR+" not found"+RESET)
        sys.exit(1)
    deppath = os.path.dirname(deppath)
    os.chdir(os.path.join(root, deppath))
    try:
        sp = subprocess.run(["vimake", impl] + (["-d"] if "-d" in sys.argv else []))
    except subprocess.CalledProcessError as e:
        """print(PREFIX+ERR+"Dependency "+YELLOW+dep+ERR+" failed"+RESET)
        print(PREFIX+ERR+"Error code: "+str(e.returncode)+RESET)
        print(PREFIX+ERR+"Output: "+RESET)
        print(e.output.decode())"""
        sys.exit(1)
    if sp.returncode:
        sys.exit(1)
    os.chdir(root)

if "-d" in sys.argv:
    if lvl == 0:
        print(PREFIX+OK+"Depencies checked"+RESET)
    sys.exit()

# 4. read the actions

actions = config["actions"]
build = actions.get("build", None)
run = actions.get("run", None)
debug = actions.get("debug", None)

if build is None and run is None and debug is None:
    print(PREFIX+ERR+"No build, run or debug action found"+RESET)
    sys.exit(1)

if build is not None:
    print(PREFIX+TASK+"Building"+RESET)
    for file in build["files"]:
        file = file.replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
        file = os.path.join(os.getcwd(), file)
        if os.path.exists(file):
            os.remove(file)
    outputs = ""
    for cmd in build["commands"]:
        try:
            if cmd.__class__ == str:
                if cmd.startswith("@IncludeImpl"):
                    incimpl = cmd.split()[1]
                    cmd = []
                    for comd in globconfig["impls"][incimpl]["actions"]["build"]["commands"]:
                        for n, i in enumerate(comd):
                            comd[n] = i.replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
                        cmd.append(comd)
                else:
                    cmd = cmd.split()
                    for n, i in enumerate(cmd):
                        cmd[n] = i.replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
                    cmd = [cmd]
            else:
                for n, i in enumerate(cmd):
                    cmd[n] = i.replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
                cmd = [cmd]
            # print(cmd)
            for n, i in enumerate(cmd):
                e = subprocess.Popen(i, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
                out, err = e.communicate()
                out = out.decode().replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
                err = err.decode().replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
                outputs += out + err
        except subprocess.CalledProcessError as e:
            print(ERR+"Build failed"+RESET)
            print(ERR+"Command: "+YELLOW+" ".join(cmd)+RESET)
            print(ERR+"Error code: "+YELLOW+str(e.returncode)+RESET)
            print(ERR+"Output: "+RESET)
            print(PREFIX+outputs.replace("\n", "\n"+PREFIX+"    "))
            sys.exit(1)
    for file in build["files"]:
        file = file.replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
        if not os.path.exists(file):
            print(PREFIX+ERR+"Build failed"+RESET)
            print(PREFIX+ERR+"Output file not detected: "+YELLOW+file+RESET)
            print(PREFIX+ERR+"Output: "+RESET)
            print(PREFIX+outputs.replace("\n", "\n"+PREFIX+PREFIX))
            sys.exit(1)

print(PREFIX+OK+"Build OK"+RESET)

if run is not None:
    print(PREFIX+TASK+"Running"+RESET)
    for cmd in run["commands"]:
        try:
            if cmd.__class__ == str:
                cmd = cmd.split()
            for n, i in enumerate(cmd):
                cmd[i] = cmd[i].replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
            subprocess.run(cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
            out, err = e.communicate()
        except subprocess.CalledProcessError as e:
            print(PREFIX+ERR+"Run failed"+RESET)
            print(PREFIX+ERR+"Error code: "+YELLOW+str(e.returncode)+RESET)
            print(PREFIX+ERR+"Output: "+RESET)
            print(e.output.decode())
            sys.exit(1)

    print(OK+"Run OK"+RESET)

if debug is not None:
    print(PREFIX+TASK+"Debugging"+RESET)
    for cmd in debug["commands"]:
        try:
            e = subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
            out, err = e.communicate()
            out = out.decode().replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
            err = err.decode().replace("${ImplName}", impl).\
                    replace("${ModuleRoot}", os.environ["VIMAKE_ROOT"])
        except subprocess.CalledProcessError as e:
            print(PREFIX+ERR+"Debug failed"+RESET)
            print(PREFIX+ERR+"Error code: "+YELLOW+str(e.returncode)+RESET)
            print(PREFIX+ERR+"Output: "+RESET)
            print(PREFIX+out.replace("\n", "\n"+PREFIX+PREFIX))
            print(PREFIX+err.replace("\n", "\n"+PREFIX+PREFIX))
            sys.exit(1)
    
    print(OK+"Debug OK"+RESET)

if lvl == 0:
    del os.environ["VIMAKE_LEVEL"]
    del os.environ["VIMAKE_ROOT"]
